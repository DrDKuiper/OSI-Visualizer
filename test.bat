@echo off
REM OSI Visualizer - Script de Teste para Windows
REM Execute como Administrador para funcionar corretamente

echo üß™ OSI Visualizer - Teste Automatizado (Windows)
echo ===============================================

REM Verificar se est√° na raiz do projeto
if not exist "README.md" (
    echo ‚ùå Execute este script na raiz do projeto OSI-Visualizer
    pause
    exit /b 1
)

if not exist "backend" (
    echo ‚ùå Diret√≥rio backend n√£o encontrado
    pause
    exit /b 1
)

if not exist "frontend" (
    echo ‚ùå Diret√≥rio frontend n√£o encontrado
    pause
    exit /b 1
)

echo ‚ÑπÔ∏è  Iniciando testes...

REM 1. Verificar Python
echo.
echo ‚ÑπÔ∏è  1. Verificando Python...
python --version >nul 2>&1
if %errorlevel% == 0 (
    python --version
    echo ‚úÖ Python encontrado
    set PYTHON_CMD=python
) else (
    python3 --version >nul 2>&1
    if %errorlevel% == 0 (
        python3 --version
        echo ‚úÖ Python3 encontrado
        set PYTHON_CMD=python3
    ) else (
        echo ‚ùå Python n√£o encontrado. Instale Python 3.8+
        pause
        exit /b 1
    )
)

REM 2. Verificar Node.js
echo.
echo ‚ÑπÔ∏è  2. Verificando Node.js...
node --version >nul 2>&1
if %errorlevel% == 0 (
    node --version
    echo ‚úÖ Node.js encontrado
) else (
    echo ‚ùå Node.js n√£o encontrado. Instale Node.js 16+
    pause
    exit /b 1
)

REM 3. Verificar npm
npm --version >nul 2>&1
if %errorlevel% == 0 (
    npm --version
    echo ‚úÖ npm encontrado
) else (
    echo ‚ùå npm n√£o encontrado
    pause
    exit /b 1
)

REM 4. Testar Backend
echo.
echo ‚ÑπÔ∏è  3. Testando Backend...
cd backend

if exist "requirements.txt" (
    echo ‚ÑπÔ∏è  Instalando depend√™ncias Python...
    %PYTHON_CMD% -m pip install -r requirements.txt >nul 2>&1
    if %errorlevel% == 0 (
        echo ‚úÖ Depend√™ncias Python instaladas
    ) else (
        echo ‚ö†Ô∏è  Erro ao instalar depend√™ncias Python
    )
) else (
    echo ‚ùå requirements.txt n√£o encontrado
)

echo ‚ÑπÔ∏è  Testando imports Python...
%PYTHON_CMD% -c "import flask, scapy, flask_cors; print('Imports OK')" >nul 2>&1
if %errorlevel% == 0 (
    echo ‚úÖ Imports Python OK
) else (
    echo ‚ùå Erro nos imports Python
)

cd ..

REM 5. Testar Frontend
echo.
echo ‚ÑπÔ∏è  4. Testando Frontend...
cd frontend

if exist "package.json" (
    echo ‚ÑπÔ∏è  Instalando depend√™ncias Node.js...
    npm install >nul 2>&1
    if %errorlevel% == 0 (
        echo ‚úÖ Depend√™ncias Node.js instaladas
    ) else (
        echo ‚ö†Ô∏è  Erro ao instalar depend√™ncias Node.js
    )
) else (
    echo ‚ùå package.json n√£o encontrado
)

echo ‚ÑπÔ∏è  Testando build do frontend...
npm run build >nul 2>&1
if %errorlevel% == 0 (
    echo ‚úÖ Build do frontend OK
    if exist "dist" rmdir /s /q dist >nul 2>&1
) else (
    echo ‚ùå Erro no build do frontend
)

cd ..

REM 6. Verificar portas
echo.
echo ‚ÑπÔ∏è  5. Verificando portas...
netstat -an | findstr :5000 >nul 2>&1
if %errorlevel% == 0 (
    echo ‚ö†Ô∏è  Porta 5000 j√° est√° em uso
) else (
    echo ‚úÖ Porta 5000 dispon√≠vel
)

netstat -an | findstr :3000 >nul 2>&1
if %errorlevel% == 0 (
    echo ‚ö†Ô∏è  Porta 3000 j√° est√° em uso
) else (
    echo ‚úÖ Porta 3000 dispon√≠vel
)

REM 7. Verificar privil√©gios de administrador
echo.
echo ‚ÑπÔ∏è  6. Verificando privil√©gios...
net session >nul 2>&1
if %errorlevel% == 0 (
    echo ‚úÖ Executando como Administrador
) else (
    echo ‚ö†Ô∏è  N√ÉO est√° executando como Administrador
    echo ‚ö†Ô∏è  A captura de pacotes pode n√£o funcionar
)

REM 8. Verificar arquivos essenciais
echo.
echo ‚ÑπÔ∏è  7. Verificando estrutura do projeto...

set files=README.md backend\app.py backend\capture.py backend\requirements.txt frontend\package.json frontend\src\App.js frontend\src\main.jsx frontend\vite.config.js

for %%f in (%files%) do (
    if exist "%%f" (
        echo ‚úÖ Arquivo encontrado: %%f
    ) else (
        echo ‚ùå Arquivo ausente: %%f
    )
)

REM 9. Resumo
echo.
echo üìä RESUMO DOS TESTES
echo ===================
echo.
echo ‚ÑπÔ∏è  Para executar manualmente:
echo.
echo Backend (execute como Administrador):
echo   cd backend
echo   %PYTHON_CMD% app.py
echo.
echo Frontend (em outro terminal):
echo   cd frontend
echo   npm run dev
echo.
echo Acesse: http://localhost:3000
echo.
echo ‚ÑπÔ∏è  Para gerar tr√°fego de teste:
echo   curl http://httpbin.org/get
echo   ping google.com
echo   nslookup github.com
echo.
echo ‚úÖ Testes automatizados conclu√≠dos!
echo ‚ÑπÔ∏è  Consulte TESTING.md para testes manuais detalhados
echo.
pause
